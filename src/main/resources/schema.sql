DROP TABLE IF EXISTS
film_genre, friends, likes, genre, film_director, directors, feeds, FILMS_REVIEWS, LIKES_REVIEWS, USERS_REVIEWS, REVIEWS, USERS, FILMS, RATING;

 CREATE TABLE IF NOT EXISTS rating (
   rating_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
   rating_name varchar
 );

  CREATE TABLE IF NOT EXISTS genre (
   genre_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
   genre varchar
 );

 CREATE TABLE IF NOT EXISTS users (
   id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
   email varchar,
   login varchar,
   name varchar,
   birthday date
 );

 CREATE TABLE IF NOT EXISTS friends(
  following_user_id integer,
  followed_user_id integer,
  PRIMARY KEY (following_user_id, followed_user_id),
  FOREIGN KEY (following_user_id) REFERENCES users (id),
  FOREIGN KEY (followed_user_id) REFERENCES users (id)
);

 CREATE TABLE IF NOT EXISTS feeds (
   eventId integer NOT NULL AUTO_INCREMENT,
   entityId integer,
   eventType varchar,
   operation varchar,
   timestamp BIGINT,
   user_id integer REFERENCES users(id),
   PRIMARY KEY (eventId)
 );

 CREATE TABLE IF NOT EXISTS films (
  id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name varchar,
  description varchar,
  release_date date,
  duration integer,
  rating_id integer,
  FOREIGN KEY (rating_id) REFERENCES rating (rating_id)
);

 CREATE TABLE IF NOT EXISTS likes (
  user_id integer,
  film_id integer,
  PRIMARY KEY (user_id, film_id),
  FOREIGN KEY (user_id) REFERENCES users (id),
  FOREIGN KEY (film_id) REFERENCES films (id)
);

CREATE TABLE IF NOT EXISTS film_genre (
  film_id integer,
  genre_id integer,
  PRIMARY KEY (film_id, genre_id),
  FOREIGN KEY (genre_id) REFERENCES genre (genre_id),
  FOREIGN KEY (film_id) REFERENCES films (id)
);

CREATE TABLE IF NOT EXISTS directors (
 director_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
 director varchar
 );

CREATE TABLE IF NOT EXISTS film_director (
  film_id integer,
  director_id integer,
  PRIMARY KEY (film_id, director_id),
  FOREIGN KEY (director_id) REFERENCES directors (director_id),
  FOREIGN KEY (film_id) REFERENCES films (id)
);

CREATE TABLE IF NOT EXISTS reviews (
  review_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  content varchar,
  is_positive boolean,
  useful integer
);

CREATE TABLE IF NOT EXISTS films_reviews (
  film_id integer,
  review_id integer,
  PRIMARY KEY (film_id, review_id),
  FOREIGN KEY (review_id) REFERENCES reviews (review_id),
  FOREIGN KEY (film_id) REFERENCES films (id)
);

CREATE TABLE IF NOT EXISTS users_reviews (
  user_id integer,
  review_id integer,
  PRIMARY KEY (user_id, review_id),
  FOREIGN KEY (review_id) REFERENCES reviews (review_id),
  FOREIGN KEY (user_id) REFERENCES users (id)
);

CREATE TABLE IF NOT EXISTS likes_reviews (
  user_id integer,
  review_id integer,
  is_like boolean,
  PRIMARY KEY (user_id, review_id),
  FOREIGN KEY (review_id) REFERENCES reviews (review_id),
  FOREIGN KEY (user_id) REFERENCES users (id)
);